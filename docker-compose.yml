version: "3.1"

services:
  api_gateway:
    container_name: api_gateway
    hostname: api_gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "8000:8000"
      - "443:443"
    networks:
      - network

  accommodation_service:
    build:
      context: ./accommodation/
      dockerfile: Dockerfile
    restart: always
    container_name: "accommodation_service"
    hostname: "accommodation_service"
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - MONGO_DB_URI=${MONGO_DB_URI_ACCOMMODATION}
    depends_on:
      accommodation_db:
        condition: service_healthy
    networks:
      - network

  accommodation_db:
    hostname: "accommodation_db"
    container_name: "accommodation_db"
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: accommodationDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - accommodation_db:/data/db
    networks:
      - network

  auth_service:
    build:
      context: ./auth/
      dockerfile: Dockerfile
    restart: always
    container_name: "auth_service"
    hostname: "auth_service"
    ports:
      - 8081:8081
    environment:
      - PORT=8081
      - MONGO_DB_URI=${MONGO_DB_URI_AUTH}
    depends_on:
      auth_db:
        condition: service_healthy
    networks:
      - network

  auth_db:
    hostname: "auth_db"
    container_name: "auth_db"
    image: mongo
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: authDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - auth_db:/data/db
    networks:
      - network

  reservation_service:
    build:
      context: ./reservation/
      dockerfile: Dockerfile
    restart: always
    container_name: "reservation_service"
    hostname: "reservation_service"
    ports:
      - 8082:8082
    environment:
      - PORT=8082
      - CASS_DB=${CASS_DB}
      - CASSANDRA_HOST=${CASSANDRA_HOST}
      - CASSANDRA_PORT=${CASSANDRA_PORT}
      - CASSANDRA_USER=${CASSANDRA_USER}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD}
    depends_on:
      reservation_db:
        condition: service_healthy
    networks:
      - network

  reservation_db:
    hostname: "reservation_db"
    container_name: "reservation_db"
    image: cassandra
    restart: always
    ports:
      - "9042:9042"
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data
    networks:
      - network

  profile_service:
    build:
      context: ./profile/
      dockerfile: Dockerfile
    restart: always
    container_name: "profile_service"
    hostname: "profile_service"
    ports:
      - 8083:8083
    environment:
      - PORT=8083
      - MONGO_DB_URI=${MONGO_DB_URI_PROFILE}
    depends_on:
      profile_db:
        condition: service_healthy
    networks:
      - network

  profile_db:
    hostname: "profile_db"
    container_name: "profile_db"
    image: mongo
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: profileDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - profile_db:/data/db
    networks:
      - network

volumes:
  accommodation_db:
  auth_db:
  cass_store:
  profile_db:

networks:
  network:
    driver: bridge
